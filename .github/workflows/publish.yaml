# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
# Will run after pushing results from scripts/bump_versions.json
name: Publish
on:
  push:
    branches:
      - main
    paths:
      - 'package.json'
      - 'packages/*/package.json'

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      versionChanged: "${{ steps.check.outputs.versionChanged }}"
      version: "${{ steps.check.outputs.version }}"
    steps:
      - uses: actions/checkout@v4
      - name: "Check"
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require("fs")
            const launcherPackageJson = fs.readFileSync("packages/obsidian-launcher/package.json", 'utf-8');
            const launcherVersion = JSON.parse(launcherPackageJson).version;
            const servicePackageJson = fs.readFileSync("packages/wdio-obsidian-service/package.json", 'utf-8');
            const serviceVersion = JSON.parse(servicePackageJson).version;
            const registryJson = await fetch('https://registry.npmjs.org/wdio-obsidian-service/latest').then(r => r.json());
            const registryVersion = registryJson.version;

            if (serviceVersion != launcherVersion) {
              throw Error("Package versions must match")
            }

            core.setOutput('version', serviceVersion);
            if (registryVersion == serviceVersion) {
              core.setOutput('versionChanged', 'false');
            } else {
              core.setOutput('versionChanged', 'true');
            }

  build-and-publish:
    if: ${{ success() && needs.check.outputs.versionChanged == 'true' }}
    runs-on: ubuntu-latest
    needs: check
    permissions:
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Build
        run: |
          npm ci
          npm run build

      - name: Release
        run: |
          gh release create "$VERSION" --title "$VERSION"
        env:
          VERSION: "${{ needs.check.outputs.version }}"
          GH_TOKEN: "${{ github.token }}"

      - name: Publish
        run: npm publish --workspaces --provenance --access public
        env:
          NODE_AUTH_TOKEN: "${{ secrets.NPM_TOKEN }}"

      - name: Generate docs
        run: npm run doc

      - name: Upload docs as artifact
        id: deployment
        uses: actions/upload-pages-artifact@v3
        with:
          name: github-pages
          path: docs/

  deploy-docs:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build-and-publish
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          artifact_name: github-pages
