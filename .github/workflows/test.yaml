name: Test
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            node-version: "18.x"
            test-preset: "sample"
          - os: windows-latest
            node-version: "18.x"
            test-preset: "first-and-last"
          - os: macos-latest
            node-version: "18.x"
            test-preset: "first-and-last"
            max-instances: 1
          # Also test other node versions
          - os: ubuntu-latest
            node-version: "20.x"
            test-preset: "last"
          - os: ubuntu-latest
            node-version: "22.x"
            test-preset: "last"
    runs-on: ${{ matrix.os }}
    name: e2e-test-${{ matrix.os }}-node-${{ matrix.node-version }}
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Cache .obsidian-cache
        uses: actions/cache@v4
        with:
          path: .obsidian-cache
          key: obsidian-cache-${{ matrix.os }}-${{ matrix.node-version }}-${{ hashFiles('./obsidian-versions.json') }}
          restore-keys: obsidian-cache-${{matrix.os}}-${{ matrix.node-version }}

      - name: Build
        run: |
          npm ci
          npm run build
      
      - name: Run unit tests
        run: npm run test:unit

      - name: Run e2e tests
        # On linux we need to use xvfb-run to setup a virtual display server
        run: |
          ${{ matrix.os == 'ubuntu-latest' && 'xvfb-run --server-args="-screen 0 1280x1024x24"  \' || '' }}
          npm run test:e2e
        env:
          TEST_PRESET: ${{matrix.test-preset}}
          WDIO_MAX_INSTANCES: ${{matrix.max-instances || '4'}}
          # Secrets won't be available when run as on a PR
          OBSIDIAN_USERNAME: ${{ secrets.OBSIDIAN_USERNAME }}
          OBSIDIAN_PASSWORD: ${{ secrets.OBSIDIAN_PASSWORD }}

  check:
    if: always()
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - name: Check all tests passed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}
