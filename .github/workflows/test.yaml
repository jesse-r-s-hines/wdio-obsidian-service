name: Test
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  test-desktop:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Test os and architecture combinations
          - os: ubuntu-latest
            node-version: "18.x"
            test-preset: "all"
            obsidian-versions: "sample"
          - os: windows-latest
            node-version: "18.x"
            test-preset: "all"
            obsidian-versions: "latest/latest earliest/earliest"
          - os: macos-latest # arm
            node-version: "18.x"
            test-preset: "all"
            obsidian-versions: "latest/latest earliest/earliest"
            max-instances: 2
          - os: ubuntu-24.04-arm
            node-version: "22.x"
            test-preset: "basic"
            obsidian-versions: "latest/latest earliest/earliest"
          - os: windows-11-arm
            node-version: "22.x"
            test-preset: "basic"
            obsidian-versions: "latest/latest latest/1.6.5"
          - os: macos-13 # x86
            node-version: "18.x"
            test-preset: "basic"
            obsidian-versions: "latest/latest earliest/earliest"
          # Also test other node versions
          - os: ubuntu-latest
            node-version: "20.x"
            test-preset: "all"
            obsidian-versions: "latest/latest"
          - os: ubuntu-latest
            node-version: "22.x"
            test-preset: "all"
            obsidian-versions: "latest/latest"
          - os: ubuntu-latest
            node-version: "24.x"
            test-preset: "all"
            obsidian-versions: "latest/latest"
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    name: test (${{ matrix.os }}, node ${{ matrix.node-version }})
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Cache .obsidian-cache
        uses: actions/cache@v4
        with:
          path: .obsidian-cache
          key: obsidian-cache-${{ matrix.os }}-${{ matrix.obsidian-versions }}-${{ hashFiles('./obsidian-versions.json') }}

      - run: npm ci
      - name: Build
        run: npm run build
      
      - name: Run unit tests
        run: npm run test:unit

      # On linux runners we need to set up a virtual graphics stack for Obsidian. Here we use xvfb as a virtual display
      # server and herbstluftwm as the window manager. (You can often get by without a window manager but Obsidian
      # popout windows will have issues without it.)
      - if: ${{ startsWith(matrix.os, 'ubuntu-') }}
        name: "Install window manager"
        uses: awalsh128/cache-apt-pkgs-action@v1.4.3
        with:
          packages: herbstluftwm
          version: 1
          execute_install_scripts: true
      - if: ${{ startsWith(matrix.os, 'ubuntu-') }}
        name: "Setup virtual graphics"
        run: |
          export DISPLAY=:99
          echo "DISPLAY=$DISPLAY" >> "$GITHUB_ENV"
          Xvfb $DISPLAY -screen 0 1280x1024x24 +extension GLX -noreset &
          sleep 1
          herbstluftwm &
          sleep 1

      - name: Run e2e tests
        run: npm run test:e2e
        env:
          TEST_PRESET: ${{ matrix.test-preset }}
          OBSIDIAN_VERSIONS: ${{matrix.obsidian-versions}}
          WDIO_MAX_INSTANCES: ${{matrix.max-instances || '4'}}
          # Secrets won't be available when run on a PR
          OBSIDIAN_EMAIL: ${{ secrets.OBSIDIAN_EMAIL }}
          OBSIDIAN_PASSWORD: ${{ secrets.OBSIDIAN_PASSWORD }}

  test-android:
    env:
      AVD_ARGS: "-no-metrics -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none"
    strategy:
      fail-fast: false
      matrix:
        include:
          - obsidian-version: latest
            android-api-level: 36
            android-profile: pixel
          - obsidian-version: earliest
            android-api-level: 36
            android-profile: pixel
    runs-on: ubuntu-latest
    name: test (android, api ${{ matrix.android-api-level }}, profile ${{ matrix.android-profile }}, obsidian ${{ matrix.obsidian-version }})
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: 'npm'

      - name: Cache .obsidian-cache
        uses: actions/cache@v4
        with:
          path: .obsidian-cache
          key: obsidian-cache-android-${{ matrix.obsidian-version }}-${{ hashFiles('./obsidian-versions.json') }}

      - run: npm ci
      - name: Build
        run: npm run build

      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
  
      - name: AVD cache
        id: avd-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.android-api-level }}-${{ matrix.android-profile }}

      - name: run android tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          force-avd-creation: false
          avd-name: obsidian_test
          emulator-options: -no-snapshot-save ${{ env.AVD_ARGS }}
          api-level: ${{ matrix.android-api-level }}
          arch: "x86_64"
          target: google_apis
          profile: ${{ matrix.android-profile }}
          disk-size: 4096M
          heap-size: 512M
          script: npm run test:android
        env:
          OBSIDIAN_VERSIONS: ${{ matrix.obsidian-version }}
          OBSIDIAN_EMAIL: ${{ secrets.OBSIDIAN_EMAIL }}
          OBSIDIAN_PASSWORD: ${{ secrets.OBSIDIAN_PASSWORD }}

  check:
    if: always()
    needs: [test-desktop, test-android]
    runs-on: ubuntu-latest
    steps:
      - name: Check all tests passed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}
